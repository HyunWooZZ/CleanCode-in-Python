from collections.abc import Mapping
from ocp_goodcase import UnknownEvent

class Event:
    def __init__(self, raw_data):
        self._raw_data = raw_data

    @staticmethod
    def meets_conditions(event_data: dict) -> bool:
        return False
    
    @staticmethod
    def validate_precondition(event_data: dict):
        if not isinstance(event_data, Mapping):
            raise ValueError(f"{event_data!r} not dict data type..")
        for moment in ("before", "after"):
            if moment not in event_data:
                raise ValueError(f"{event_data} not in the {moment} infomation..")
            if not isinstance(event_data[moment], Mapping):
                raise ValueError(f"event_data[{moment!r}] not dict data type..")
            
class SystemMonitor:
    """categorize the sytem`s event """
    def __init__(self, event_data):
        self.event_data = event_data

    def identify_event(self):
        Event.validate_precondition(self.event_data)
        event_cls = next(
            (
                event_cls
                for event_cls in Event.__subclasses__() 
                if event_cls.meets_conditions(self.event_data)
            ),
            UnknownEvent
        )
        return event_cls
    